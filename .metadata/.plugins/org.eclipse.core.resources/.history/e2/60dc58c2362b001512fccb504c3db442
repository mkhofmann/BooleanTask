
public class Tasks {
//	public static String clamShellBottom(String stl, float x, float y, float z){
//		String model ="";
//		String[] lines ={
//				Codes.cube(x, y, z/2), 
//				Codes.importSTL(stl)/*assume positioning*/
//				};
//		model+= Codes.difference(lines);		
//		return model;
//	}
//	
//	public static String clamShellTop(String stl,float x, float y, float z ){
//		String model ="";
//		String[] lines ={
//				Codes.translate(0, 0, z/2, Codes.cube(x, y, z/2)), 
//				Codes.importSTL(stl)/*assume positioning*/
//				};
//		model+= Codes.difference(lines);		
//		return model;
//	}
//	public static String clamShell(String stl,float x, float y, float z ){
//		String model="";
//		model+= Tasks.clamShellBottom(stl, x, y, z);
//		model+= Codes.translate(0, y+10, z/2, 
//					Codes.rotate(180, 0, 0, 
//							Tasks.clamShellTop(stl, x, y, z)
//					)
//				);
//		return model;
//	}
	public static String mold(String model, float x, float y, float z){
		String[] lines ={
				Codes.cube(x, y, z),
				Codes.importSTL(model)
		};
		return Codes.difference(lines);
	}
	public static String SliceModelXY(String model, float xBound, float yBound, float z){
		String[] intersectLower ={Codes.cube(xBound, yBound, z), model};

		String[] intersectUpper ={Codes.translate(0, 0, z, Codes.cube(xBound, yBound, z)),model};
		String[] lines ={
				Codes.translate(0, 0, -10, Codes.intersection(intersectLower)),
				Codes.translate(0, 0, 10, Codes.intersection(intersectUpper))
		};
		return Codes.multiLine(lines);
	}
	
	public static String crop(String model, float xZero, float yZero, float zZero, float x, float y, float z){
		String model ="";
		String[] lines ={
				Codes.translate(xZero,yZero,zZero, Codes.cube(x, y, z)), 
				Codes.importSTL(model)/*assume positioning*/
				};
		model+= Codes.intersection(lines);		
		return model;
	}
	public static String flatBottom(String stl, float x, float y, float z){
		String model ="";
		String[] lines ={
				Codes.importSTL(stl))/*assume positioning*/,
				Codes.translate(0,0,-z, Codes.cube(x, y, z))
				};
		model+= Codes.difference(lines);		
		return model;
	}
	public static String platForm(String stl, float x, float y, float z){
		String model ="";
		String[] lines ={
				Codes.importSTL(stl)/*assume positioning*/, 
				Codes.translate(0,0,-z, Codes.cube(x, y, z))
				};
		model+= Codes.union(lines);		
		return model;
	}
	public static String unionByPlatForm(String stl1, String stl2, float x, float y, float z){
		String model="";
		String[] lines ={
				Tasks.platForm(stl1, x, y, z),
				Codes.rotate(180, 0, 0, Tasks.platForm(stl2, x, y, z))
				};
		model+= Codes.union(lines);
		return model;
	}
	public static String platFormMinkowski(String stl, float x, float y, float z, float zUp){
		String model ="";
		String[] minkowski ={
				Codes.translate(0,0,-z, Codes.cube(x, y, z)),
				Tasks.crop(stl, 0, 0, 0, x, y, zUp)
				};
		String[] union ={
				Codes.importSTL(stl)/*assume positioning*/,
				Codes.minkowski(minkowski)
				};
		model+= Codes.union(union);		
		return model;
	}
	public static String unionByPlatFormMinkowski(String stl1, String stl2, float x, float y, float z, float zUp){
		String model="";
		String[] lines ={
				Tasks.platFormMinkowski(stl1, x, y, z, zUp),
				Codes.rotate(180, 0, 0, Tasks.platFormMinkowski(stl2, x, y, z, zUp))
				};
		model+= Codes.union(lines);
		return model;
	}
	
	public static void main(String args[]){//0: input, 1: stl filename// all tests are succesfull
		String[] lines=null;
		switch(Integer.parseInt(args[0])){
		case 0://mold
		case 1://slice mold
			break;
		case 2://crop
			break;
		case 3://flatBottom
			break;
		case 4://platform
			break;
		case 5://minkowski
			break;
		case 6://union platform
			break;
		case 7: //union minkowski
			break;
		default:
			break;
		}
		SCADWriter.writeSCAD(lines, "TasksTest");
	}
}
